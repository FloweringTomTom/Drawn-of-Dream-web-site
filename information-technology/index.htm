<h1 class="title">Information Technology Environment — Ember</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/components.htm">Core project components</a></span>
</p>

<h2>Introduction</h2>
    <p>This section documents the Ember computing environment: a centralized append-only information store, a computer operating system integrated with that information store, and related specifications. This is a work-in-progress draft, and everything here is subject to change and is not presently suited for implementation.</p>

<h2>Overview</h2>
    <p>The computing environment will consist of the following components:</p>
    <ul>
        <li>Development principles, describing the process to use for creating the computing environment</li>
        <li>Data formats
            <ul>
                <li>Specifications</li>
                <li>Reference implementations</li>
            </ul>
        </li>
        <li>Client app</li>
        <li>Server apps:
            <ul>
                <li>Public-facing API</li>
                <li>Search engine</li>
                <li>Storage backend</li>
            </ul>
        </li>
    </ul>

<h2>Development principles</h2>
    <h3>Prerequisites for code to be added to the repository</h3>
        <ul>
            <li>Code must be readable and documented.</li>
            <li>Code must not cause or have failing tests.</li>
            <li>Code should include thorough automatic test coverage.</li>
            <li>Code must address a deviation from the current specification (bug, missing feature, <span class="foreign-text">etc.</span>), and may not contain other code.</li>
        </ul>
    <h3>How issues should be prioritised</h3>
        <p>Ordered from highest priority to lowest priority</p>
        <ol>
            <li>Security vulnerabilities</li>
            <li>Functional regressions</li>
            <li>Incorrect results</li>
            <li>Crashes and similar critical usability issues</li>
            <li>Slow code with a significant impact on usability</li>
            <li>Aesthetic regressions</li>
            <li>Minor usability issues</li>
            <li>Slow code with a moderate impact on usability</li>
            <li>Missing features</li>
        </ol>

<h2>Data formats</h2>

    <h3>Ember Language</h3>
        <h4>Objective</h4>
            <p>Develop a machine-readable language that can be source-to-source translated into other languages. Possible target languages to investigate include NQP, C--, C, Qt, and JavaScript.</p>
        <h4>Language profiles</h4>
            <p>Ember Language programs may optionally declare a non-default language profile to use: Core, Basic, and Dangerous (the default is "Standard"). Core and Basic both restrict the program to a subset of the language. The Basic language interpreter is written using the Core subset of the language, and provides useful shortcuts to use in the development of the interpreter for the Standard profile. The Default language interpreter is written using the Basic subset of the language. The Dangerous profile allows using language features which are probably a bad idea to use, but may be needed in some cases.</p>
        <h4>Dcs</h4>
            <p>The core unit of the Ember Language is the Dc (Document Character<!-- The name comes from "DCE Character", but is redefined for this context. -->). The defined Dcs are listed in DcData.csv.</p>
            <h5>Notes on specific Dcs</h5>
                <h6>Dcs 241–245: Mode indicators</h6>
                    <p>Inclusion of the mode indicators in documents is <em>optional</em>. The selected mode expresses information about the document's expected execution environment. These modes are shortcuts that set up the environment in advance so that the document does not need to contain specific code to set up these contexts. This lets the resulting documents more concise and readable.</p>
                <h6>Dcs 246–255: Source formatting control</h6>
                    <p>Dcs 246 through 255 control the formatting of the EM format version of a document.</p>
        <h4>Document formats</h4>
            <p>There are six file formats defined by this specification. Four of them (EMD, EM, EMS, and DEMS) are general-use formats, while the fifth (EMR) is a special-purpose subset of the EMB format. EMS and DEMS are intended as an intermediate, more-readable format between EMD and EMB, and are not intended for information interchange (they are much larger than the other formats for a given document, in general).</p>
            <p>To allow backward compatibility, once a completed version of this standard has been released, the meaning of any given Dc will not change. That will ensure that existing documents retain their meaning.</p>
            <p>There is a one-to-one correspondence between EMD, EM, EMS, and DEMS files (for any given document in one of those formats, there is only one way to represent it in the other formats), but not for EMR files (because EMR files can only represent a subset of Ember Language documents). That means that documents can be losslessly round-trip-converted between those four formats.</p>
            <p>EMD, EM, and EMS files are subsets of ASCII text files, with lines delimited by 0x0A (line feed). Bytes 0x00 through 0x09, 0x0B through 0x1F, and 0x7F through 0xFF (all ranges inclusive) are disallowed. Files must end with 0x0A. This may later be changed to use UTF-8.</p>
            <p>At the end of each format's summary (except for EMR), a simple "Hello, World!" document is given in the format.</p>
            <h5>Ember Language documents (EMD), .emd</h5>
                <p>Ember Language documents are a list of Dcs. The Dcs mappable to the permitted ASCII characters are represented by those ASCII characters, with the exception of 0x40 "<code>@</code>" (Dc 1). All other Dcs are represented by "<code>@b@</code>" followed by the integer Dc ID followed by "<code>@e@</code>", such that, for instance, "<code>@</code>" would be represented as "<code>@b@1@e@</code>".</p>
                <pre><code>Hello, World!</code></pre>
            <h5>Ember Language source files (EM), .em</h5>
                <p>Ember Language source files are a programming language–inspired representation of Ember Language documents. It is the most readable of the formats, but also the most technically complex.</p>
                <pre><code>dc:
    Hello, World!</code></pre>
                <p>or more idiomatically (but not the exact equivalent of the others in terms of the Dcs used),</p>
                <pre><code>print 'Hello, World!'</code></pre>
            <h5>Ember Language sequence files (EMS), .ems</h5>
                <p>A list of Dc numbers. Four Dcs are given per line, separated by spaces.</p>
                <pre><code>57 86 93 93
96 30 18 72
96 99 93 85
19</code></pre>
            <h5>Documented Ember Language sequence files (DEMS), .dems</h5>
                <p>A variant of the EMS format for easier reading: after each line, the printable ASCII equivalent of each Dc is given following <code>0x202320</code>, each separated from the next by a space. If there is no printable ASCII equivalent, or the character is a space, "." is used instead.</p>
                <pre><code>57 86 93 93 # H e l l
96 30 18 72 # o , . W
96 99 93 85 # o r l d
19 # !</code></pre>
            <h5>Ember Record Documents (EMR), .emr</h5>
                <p>This is a special format in the "Structured" mode used for structured record storage in the Ember cloud. It is not yet defined, but will most likely be a subset of one of the other formats.</p>
        <h4>Structures in the Ember Language</h4>
            <p>The Ember Language uses the following main types of entity to represent information. They are:
                <dl>
                    <dt>Project</dt><dd>A Project is a single document, and if relevant, any other documents maintained as part of that document.</dd>
                    <dt>Module</dt><dd>A Module is one or more Library-mode documents that have a package name for addressing the things they provide.</dd>
                    <dt>Routine</dt><dd>A Routine is a set of instructions for a computer to follow as part of the process of interpreting a document. Similar concepts are known as <em>functions</em> or <em>subroutines</em> in most programming languages. Similar concepts are known as <em>methods</em> when used within objects in most programming languages.</dd>
                    <dt>Operator</dt><dd>An Operator is a short notation or syntax pattern for some common Routines (e.g., <code>Number a + Number b</code> in place of <code>add(Number a, Number b)</code>, or <code>if true; then print 'Hello, World!'; else die</code> in place of <code>if(true, {print 'Hello, World!'}, {die})</code>).</dd>
                    <dt>Identifier</dt><dd>An Identifier is a name for an entity.</dd>
                    <dt>Structure</dt><dd>A Structure is the definition of what the structure is that an entity can have, similar to type definitions or type signatures in some programming languages.</dd>
                    <dt>Statement</dt><dd>A Statement is a logical line of a document. It can be an invocation of a Routine, or a Declaration of an entity's Structure or value.</dd>
                    <dt>Type</dt><dd>Types are templates describing the structure of Objects. They are known as <em>classes</em> in most programming languages.</dd>
                    <dt>Object</dt><dd>An Object is an entity that conforms to a given Type (an <em>instance</em> of that Type).</dd>
                </dl>
            </p>
<!-- 
                <p>Routines with some dangerous properties must be labeled accordingly, as follows:
                    <dl>
                        <dt>cs!</dt><dd><span class="important-letter">C</span>hangeable routine <span class="important-letter">s</span>ignature (subtypes don't need to use this routine's signature when overriding it.)</dd>
                        <dt>nd!</dt><dd><span class="important-letter">N</span>on-<span class="important-letter">d</span>eterministic</dd>
                    </dl>
                </p>
            <h5>Object hierarchy</h5>
                <p>All objects are addressed through a hierarchy:
                <dl>
                    <dt>lang</dt><dd>Basic language Objects and Routines (automatically included)</dd>
                    <dt>system</dt><dd>Objects and Routines related to the Ember environment</dd>
                    <dt>math</dt><dd>Objects and Routines related to mathematics</dd>
                </dl>
                </p>

            <h5>Types</h5>
                <p>Types have CamelCase names beginning with an uppercase letter.</p>
                <h6>C Type</h6>
                    <dl>
                        <dt>Traits</dt><dd>C Type$type</dd>
                        <dt>Routines</dt><dd>C cs!this.$type:new(FuzzyList$params) { lang.new(this) }</dd>
                    </dl>

                <h6>C Routine</h6>
                    <dl>
                        <dt>Traits</dt><dd>
                            <ul>
                                <li>C String$code</li>
                                <li>C (Null|Routine)$onExit</li>
                            </ul></dd>
                        <dt>Routines</dt><dd><ul>
                            <li>C Any:run(FuzzyList$params) { lang.run(this,lang.cast($params,List,"return")) }</li>
                            <li>C Boolean:compare(Any$object) { /* return true if this object is identical to $object */ }</li>
                        </ul></dd>
                    </dl>

                <h6>C List</h6>
                    <dl>
                        <dt>Traits</dt><dd>
                            <ul>
                                <li>B List{set this.$allowedTypes=lang.new(List).add(Type)}$allowedTypes: List of allowed types that can be put in this list</li>
                                <li>C Natural$last: last valid index</li>
                                <li>C Natural$count: number of entries</li>
                                <li>B (Null|Natural)$entryLimit: number of entries that the list may hold; defaults to Null (meaning unlimited)</li>
                                <li>S (Null|Natural)$indexLimit: maximum index the list may use; defaults to Null (meaning unlimited)</li>
                            </ul></dd>
                        <dt>Routines</dt><dd>
                            <ul>
                                <li>B Void:add(String$value|List$value) { this.insert(this.last()+1) }</li>
                                <li>B Void:set(Natural$index,(String$value|List$value)) { lang.set(this.record($index),$value) }</li>
                                <li>B Any:get(Natural$index) { lang.get(this.record($index)) }</li>
                                <li>C Reference:record(Natural$index) { lang.getListEntry(this,$index) }</li>
                                <li>B Void:insert(Natural$index,(String$value|List$value)): insert $value at $index, moving the current $index and following items ahead by $value.count() if it's a list, and by 1 if it's a string</li>
                            </ul></dd>
                    </dl>

                <h6>C FuzzyList (inherits from List)</h6>
                    <p>When a FuzzyList is used in a list, its contents are appended to the list, and it is deconstructed. When a FuzzyList is used in the declaration of the parameters of a Routine, its first elements, starting from 0, are set to the values of the parameters passed to the Routine from its position onwards (so, for example, if the parameters declared are Natural$a,Natural$b,FuzzyList{ lang.set(lang.trait(this.entryLimit),2) }$c,Natural$d,Natural$e and it gets called with 2,3,4,5,6,7,8, then that's an error because there's no place to put 6 (the 5th parameter) (but if the entryLimit weren't set, a=2,b=3,c=(4,5,6),d=7,e=8), and if it gets called with 2,3,4,5,6,7, a=2,b=3,c=(4,5),d=6,e=7).</p>

                <h6>C Resource</h6>
                    <dl>
                        <dt>Traits</dt><dd></dd>
                        <dt>Routines</dt><dd></dd>
                    </dl>

            <h5>System object: Traits</h5>
                <p>Traits have camelCase names beginning with a lowercase letter. Routines are a type of trait.</p>
                <dl>
                    <dt>C nd!List[Resource]:system.resources</dt><dd>List of resources (I/O, etc) available.</dd>
                    <dt>C nd!String:system.implementation</dt><dd>Description of the language backend.</dd>
                </dl>

            <h5>System object: Routines</h5>
                <p>Routines have camelCase names beginning with a lowercase letter, and have parameters.</p>
                <h6>C Void:lang.run(Routine$routine,List$params)</h6>
                    <dl>
                        <dt>Exceptions thrown</dt><dd>!routineSyntaxError, !parameterNumberMismatch, !parameterTypeMismatch</dd>
                        <dt>Notes</dt><dd>Determinism depends on String:$routine.code.</dd>
                    </dl>
                <h6>C (Void|$type):lang.cast(Any$object,Type$type,(|String$return))</h6>
                    <dl>
                        <dt>Return value</dt><dd>None, unless $return="return" in which case it returns an object of type $type</dd>
                        <dt>Exceptions thrown</dt><dd>!incompatibleTypeError</dd>
                        <dt>Notes</dt><dd>If $return="return", determinism depends on types of objects (specifically, on value of String:$object.cast:$type.code).</dd>
                    </dl>
                <h6>C (Void|$trait.type):lang.set(Reference$trait,Any$value,(|String$return))</h6>
                    <dl>
                        <dt>Return value</dt><dd>None, unless $return="return" in which case it returns an object of type $trait.type</dd>
                        <dt>Exceptions thrown</dt><dd>!targetTypeMismatch</dd>
                        <dt>Notes</dt><dd>If $return="return", determinism depends on $value.</dd>
                    </dl>
                <h6>C $trait.type:lang.get(Reference$trait)</h6>
                    <dl>
                        <dt>Return value</dt><dd>An object of type $trait.type</dd>
                        <dt>Exceptions thrown</dt><dd>(none additional)</dd>
                        <dt>Notes</dt><dd>Determinism depends on $trait.</dd>
                    </dl>
                <h6>C Reference:lang.trait(Any$object)</h6>
                    <dl>
                        <dt>Return value</dt><dd>A reference to the object passed to it</dd>
                        <dt>Exceptions thrown</dt><dd>(none additional)</dd>
                        <dt>Notes</dt><dd>(none)</dd>
                    </dl>
                <h6>C Boolean:lang.compare(Any$left,Any$right)</h6>
                    <dl>
                        <dt>Return value</dt><dd>lang.and($left.compare($right),$right.compare($left))</dd>
                        <dt>Exceptions thrown</dt><dd>(inherit from $left.compare and $right.compare)</dd>
                        <dt>Notes</dt><dd>(none)</dd>
                    </dl>
                <h6>S Any:lang.otherwise(Routine$left,Routine$right)</h6>
                    <dl>
                        <dt>Return value</dt><dd>try { return $left }; except { return $right }</dd>
                        <dt>Exceptions thrown</dt><dd>(inherit from $left and $right)</dd>
                        <dt>Notes</dt><dd>(none)</dd>
                    </dl>
-->
