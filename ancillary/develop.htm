<h1 class="title">Development documentation</h1>

<p class="breadcrumbs">Page location:
    <span><a href="/">Home</a></span>
    <span><a href="/ancillary/ready-to-use.htm">Other projects</a></span>
    <span><a href="/ancillary/work-in-progress.htm">Work-in-progress ancillary projects</a></span>
</p>

<p>An <a href="issue-tracker">issue tracker is available</a>.</p>

<p>To download all of Ember and the projects it maintains:<br />

Unless you are working on Wreathe or BeHeMMOth, you probably don't need the Wreathe resource repositories or BeHeMMOth. If you do want them, run both of the following commands; otherwise, just run the second.<br />

<pre><code>declare -a emberWreatheResourceProjects=("wreathe-backgrounds" "wreathe-media-resources" "wreathe-office-resources" "wreathe-typeface-family" "wreathe-typefaces-redist" "compiz-extra-snowflake-textures" "BeHeMMOth");</code></pre><br />

<pre><code>declare -a emberProjects=("ember" "ember-information-technology-environment" "ember-library" "ember-web-site"); declare -a emberSatelliteProjects=("BeHeMMOth" "crystallize" "futuramerlin-web-toolkit" "rubberfs" "warcdealer" "wreathe" "wreathe-overlay" "${emberWreatheResourceProjects[@]}"); set -e; mkdir ember; cd ember || exit 1; mkdir ember; cd ember || exit 1; for i in "${emberProjects[@]}"; do git clone --recursive https://github.com/ethus3h/"$i".git; done; cd ..; mkdir ember-satellite-projects; cd ember-satellite-projects || exit 1; for i in "${emberSatelliteProjects[@]}"; do git clone --recursive https://github.com/ethus3h/"$i".git; done; cd ../.. || exit 1; echo "Finished downloading Ember."</code></pre><br />

To synchronise your changes to the resulting development environment (assuming you aren't using Wreathe 7.3; Wreathe 7.3 users can run <code>egup</code>, or <code>egup-web</code> to also build the Web site, or <code>eogup</code> if there isn't a Web connection available or GitHub is unavailable):<br />

Upload only:<br />
<pre><code>cd ember || exit 1; findemberfolders() { find . -maxdepth 1 -not -name '\.*' -type d -print0 | xargs -i{} -0 -P 15 sh -c 'cd "$1" || exit 1; git add -A; git commit -a -m "Update Ember tree"; git pull; git push -u origin master' -- '{}' \; ; }; set -e; cd ember || exit 1; findemberfolders; cd ../ember-satellite-projects || exit 1; findemberfolders; cd .. || exit 1; cd .. || exit 1</code></pre><br />

Update overlay and upload (requires repoman to be installed):<br />
<pre><code>cd ember || exit 1; cd ember-satellite-projects/wreathe-overlay || exit 1; repoman manifest; cd ../.. || exit 1; findemberfolders() { find . -maxdepth 1 -not -name '\.*' -type d -print0 | xargs -i{} -0 -P 15 sh -c 'cd "$1" || exit 1; git add -A; git commit -a -m "Update Ember tree"; git pull; git push -u origin master' -- '{}' \; ; }; set -e; cd ember || exit 1; findemberfolders; cd ../ember-satellite-projects || exit 1; findemberfolders; cd .. || exit 1; cd .. || exit 1</code></pre><br />

Update Web site and upload (requires futuramerlin-web-toolkit to be installed):<br />
<pre><code>cd ember || exit 1; cd ember/ember-web-site || exit 1; ~/.futuramerlin-web-toolkit-build; cd ../.. || exit 1; findemberfolders() { find . -maxdepth 1 -not -name '\.*' -type d -print0 | xargs -i{} -0 -P 15 sh -c 'cd "$1" || exit 1; git add -A; git commit -a -m "Update Ember tree"; git pull; git push -u origin master' -- '{}' \; ; }; set -e; cd ember || exit 1; findemberfolders; cd ../ember-satellite-projects || exit 1; findemberfolders; cd .. || exit 1; cd .. || exit 1</code></pre><br />

Update overlay and Web site and upload (requires repoman and futuramerlin-web-toolkit to be installed):<br />
<pre><code>cd ember || exit 1; cd ember/ember-web-site || exit 1; ~/.futuramerlin-web-toolkit-build; cd ../.. || exit 1; cd ember-satellite-projects/wreathe-overlay || exit 1; repoman manifest; cd ../.. || exit 1; findemberfolders() { find . -maxdepth 1 -not -name '\.*' -type d -print0 | xargs -i{} -0 -P 15 sh -c 'cd "$1" || exit 1; git add -A; git commit -a -m "Update Ember tree"; git pull; git push -u origin master' -- '{}' \; ; }; set -e; cd ember || exit 1; findemberfolders; cd ../ember-satellite-projects || exit 1; findemberfolders; cd .. || exit 1; cd .. || exit 1</code></pre>
</p>

<p>If you have a fork of a git repository and want to have a new clean branch that's up to date with the original repository you forked it from, run something like this, substituting in the correct values for the camelCase text:<br />
<pre><code>git clone https://github.com/yourName/repositoryName.git; cd repositoryName; git checkout -b nameForNewBranch shaSumOfLastUpstreamCommitYouHave; git remote add upstream https://github.com/ownerName/repositoryName.git; git pull upstream master; git fetch upstream master; git reset --hard upstream/master; git push --set-upstream origin nameForNewBranch</code></pre></p>

<p>A handy (but not necessarily reliable) way to work on tracking down non-source files: <code>grep -r . * | grep -xE "^Binary file .+ matches$" | grep -xvE "^Binary file .+\.(png|jpg|gif|mp3|ico|ttf|wmap) matches$" | less</code> (png, jpg, gif, mp3, etc. being binary file extensions to not list; more can be added in the same manner, and those can be removed).</p>

<p>To update a live ebuild without a network connection: <code>EVCS_OFFLINE="yes" emerge foo</code></p>
