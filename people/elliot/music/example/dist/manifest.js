/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		2: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function _defined(it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function _toObject(it) {\n  return Object(_defined(it));\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function _has(it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar toString = {}.toString;\n\nvar _cof = function _cof(it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function _toIobject(it) {\n  return _iobject(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function _toInteger(it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function _toLength(it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\nvar _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n      // Array#indexOf ignores holes, Array#includes - not\n    } else for (; length > index; index++) {\n      if (IS_INCLUDES || index in O) {\n        if (O[index] === el) return IS_INCLUDES || index || 0;\n      }\n    }return !IS_INCLUDES && -1;\n  };\n};\n\nvar _global = createCommonjsModule(function (module) {\n  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\n  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function _shared(key) {\n  return store[key] || (store[key] = {});\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function _uid(key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar shared$1 = _shared('keys');\n\nvar _sharedKey = function _sharedKey(key) {\n  return shared$1[key] || (shared$1[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function _objectKeysInternal(object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) {\n    if (key != IE_PROTO) _has(O, key) && result.push(key);\n  } // Don't enum bug & hidden keys\n  while (names.length > i) {\n    if (_has(O, key = names[i++])) {\n      ~arrayIndexOf(result, key) || result.push(key);\n    }\n  }return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar _core = createCommonjsModule(function (module) {\n  var core = module.exports = { version: '2.5.3' };\n  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\n\nvar _core_1 = _core.version;\n\nvar _aFunction = function _aFunction(it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function _ctx(fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1:\n      return function (a) {\n        return fn.call(that, a);\n      };\n    case 2:\n      return function (a, b) {\n        return fn.call(that, a, b);\n      };\n    case 3:\n      return function (a, b, c) {\n        return fn.call(that, a, b, c);\n      };\n  }\n  return function () /* ...args */{\n    return fn.apply(that, arguments);\n  };\n};\n\nvar _isObject = function _isObject(it) {\n  return (typeof it === 'undefined' ? 'undefined' : _typeof2(it)) === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function _anObject(it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function _fails(exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function get() {\n      return 7;\n    } }).a != 7;\n});\n\nvar document$1 = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document$1) && _isObject(document$1.createElement);\nvar _domCreate = function _domCreate(it) {\n  return is ? document$1.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function get() {\n      return 7;\n    } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function _toPrimitive(it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) {/* empty */}\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n  f: f\n};\n\nvar _propertyDesc = function _propertyDesc(bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function $export(type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? _ctx(out, _global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? function (C) {\n      var F = function F(a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0:\n              return new C();\n            case 1:\n              return new C(a);\n            case 2:\n              return new C(a, b);\n          }return new C(a, b, c);\n        }return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n      // make static versions for prototype methods\n    }(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1; // forced\n$export.G = 2; // global\n$export.S = 4; // static\n$export.P = 8; // proto\n$export.B = 16; // bind\n$export.W = 32; // wrap\n$export.U = 64; // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\n// most Object methods by ES6 should accept primitives\n\n\nvar _objectSap = function _objectSap(KEY, exec) {\n  var fn = (_core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  _export(_export.S + _export.F * _fails(function () {\n    fn(1);\n  }), 'Object', exp);\n};\n\n// 19.1.2.14 Object.keys(O)\n\n\n_objectSap('keys', function () {\n  return function keys(it) {\n    return _objectKeys(_toObject(it));\n  };\n});\n\nvar keys = _core.Object.keys;\n\nvar keys$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": keys, __esModule: true };\n});\n\nvar _Object$keys = unwrapExports(keys$2);\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function _stringAt(TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _library = true;\n\nvar _redefine = _hide;\n\nvar _iterators = {};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) {\n    _objectDp.f(O, P = keys[i++], Properties[P]);\n  }return O;\n};\n\nvar document$2 = _global.document;\nvar _html = document$2 && document$2.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function Empty() {/* empty */};\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar _createDict = function createDict() {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  _createDict = iframeDocument.F;\n  while (i--) {\n    delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  }return _createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = _createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\nvar _wks = createCommonjsModule(function (module) {\n  var store = _shared('wks');\n\n  var _Symbol = _global.Symbol;\n  var USE_SYMBOL = typeof _Symbol == 'function';\n\n  var $exports = module.exports = function (name) {\n    return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : _uid)('Symbol.' + name));\n  };\n\n  $exports.store = store;\n});\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function _setToStringTag(it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () {\n  return this;\n});\n\nvar _iterCreate = function _iterCreate(Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  }return O instanceof Object ? ObjectProto : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function returnThis() {\n  return this;\n};\n\nvar _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function getMethod(kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS:\n        return function keys() {\n          return new Constructor(this, kind);\n        };\n      case VALUES:\n        return function values() {\n          return new Constructor(this, kind);\n        };\n    }return function entries() {\n      return new Constructor(this, kind);\n    };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = !BUGGY && $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!_library && !_has(IteratorPrototype, ITERATOR)) _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() {\n      return $native.call(this);\n    };\n  }\n  // Define iterator\n  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0; // next index\n  // 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\nvar _iterStep = function _iterStep(done, value) {\n  return { value: value, done: !!done };\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = _toIobject(iterated); // target\n  this._i = 0; // next index\n  this._k = kind; // kind\n  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if (kind == 'keys') return _iterStep(0, index);\n  if (kind == 'values') return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\nvar TO_STRING_TAG = _wks('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = _global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\n  _iterators[NAME] = _iterators.Array;\n}\n\nvar f$1 = _wks;\n\nvar _wksExt = {\n  f: f$1\n};\n\nvar iterator = _wksExt.f('iterator');\n\nvar iterator$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": iterator, __esModule: true };\n});\n\nunwrapExports(iterator$2);\n\nvar _meta = createCommonjsModule(function (module) {\n  var META = _uid('meta');\n\n  var setDesc = _objectDp.f;\n  var id = 0;\n  var isExtensible = Object.isExtensible || function () {\n    return true;\n  };\n  var FREEZE = !_fails(function () {\n    return isExtensible(Object.preventExtensions({}));\n  });\n  var setMeta = function setMeta(it) {\n    setDesc(it, META, { value: {\n        i: 'O' + ++id, // object ID\n        w: {} // weak collections IDs\n      } });\n  };\n  var fastKey = function fastKey(it, create) {\n    // return primitive with prefix\n    if (!_isObject(it)) return (typeof it === 'undefined' ? 'undefined' : _typeof2(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n    if (!_has(it, META)) {\n      // can't set metadata to uncaught frozen object\n      if (!isExtensible(it)) return 'F';\n      // not necessary to add metadata\n      if (!create) return 'E';\n      // add missing metadata\n      setMeta(it);\n      // return object ID\n    }return it[META].i;\n  };\n  var getWeak = function getWeak(it, create) {\n    if (!_has(it, META)) {\n      // can't set metadata to uncaught frozen object\n      if (!isExtensible(it)) return true;\n      // not necessary to add metadata\n      if (!create) return false;\n      // add missing metadata\n      setMeta(it);\n      // return hash weak collections IDs\n    }return it[META].w;\n  };\n  // add metadata on freeze-family methods calling\n  var onFreeze = function onFreeze(it) {\n    if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n    return it;\n  };\n  var meta = module.exports = {\n    KEY: META,\n    NEED: false,\n    fastKey: fastKey,\n    getWeak: getWeak,\n    onFreeze: onFreeze\n  };\n});\n\nvar _meta_1 = _meta.KEY;\nvar _meta_2 = _meta.NEED;\nvar _meta_3 = _meta.fastKey;\nvar _meta_4 = _meta.getWeak;\nvar _meta_5 = _meta.onFreeze;\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function _wksDefine(name) {\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });\n};\n\nvar f$2 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n  f: f$2\n};\n\nvar f$3 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n  f: f$3\n};\n\n// all enumerable object keys, includes symbols\n\n\nvar _enumKeys = function _enumKeys(it) {\n  var result = _objectKeys(it);\n  var getSymbols = _objectGops.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = _objectPie.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) {\n      if (isEnum.call(it, key = symbols[i++])) result.push(key);\n    }\n  }return result;\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg) {\n  return _cof(arg) == 'Array';\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n  f: f$4\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\nvar gOPN = _objectGopn.f;\nvar toString$1 = {}.toString;\n\nvar windowNames = (typeof window === 'undefined' ? 'undefined' : _typeof2(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function getWindowNames(it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n  f: f$5\n};\n\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if (_ie8DomDefine) try {\n    return gOPD(O, P);\n  } catch (e) {/* empty */}\n  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n  f: f$6\n};\n\n// ECMAScript 6 symbols shim\n\n\nvar META = _meta.KEY;\n\nvar gOPD$1 = _objectGopd.f;\nvar dP$1 = _objectDp.f;\nvar gOPN$1 = _objectGopnExt.f;\nvar $Symbol = _global.Symbol;\nvar $JSON = _global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE$2 = 'prototype';\nvar HIDDEN = _wks('_hidden');\nvar TO_PRIMITIVE = _wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols = _shared('symbols');\nvar OPSymbols = _shared('op-symbols');\nvar ObjectProto$1 = Object[PROTOTYPE$2];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function () {\n  return _objectCreate(dP$1({}, 'a', {\n    get: function get() {\n      return dP$1(this, 'a', { value: 7 }).a;\n    }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD$1(ObjectProto$1, key);\n  if (protoDesc) delete ObjectProto$1[key];\n  dP$1(it, key, D);\n  if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);\n} : dP$1;\n\nvar wrap = function wrap(tag) {\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && _typeof2($Symbol.iterator) == 'symbol' ? function (it) {\n  return (typeof it === 'undefined' ? 'undefined' : _typeof2(it)) == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty$1 = function defineProperty(it, key, D) {\n  if (it === ObjectProto$1) $defineProperty$1(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if (_has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });\n    }return setSymbolDesc(it, key, D);\n  }return dP$1(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) {\n    $defineProperty$1(it, key = keys[i++], P[key]);\n  }return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n  var D = gOPD$1(it, key);\n  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN$1(_toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  }return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto$1;\n  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);\n  }return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function _Symbol2() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function $set(value) {\n      if (this === ObjectProto$1) $set.call(OPSymbols, value);\n      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f = $defineProperty$1;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if (_descriptors && !_library) {\n    _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function (name) {\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols =\n// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {\n  _wks(es6Symbols[j++]);\n}for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {\n  _wksDefine(wellKnownSymbols[k++]);\n}_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function _for(key) {\n    return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) {\n      if (SymbolRegistry[key] === sym) return key;\n    }\n  },\n  useSetter: function useSetter() {\n    setter = true;\n  },\n  useSimple: function useSimple() {\n    setter = false;\n  }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty$1,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) {\n      args.push(arguments[i++]);\n    }$replacer = replacer = args[1];\n    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!_isArray(replacer)) replacer = function replacer(key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar symbol = _core.Symbol;\n\nvar symbol$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": symbol, __esModule: true };\n});\n\nunwrapExports(symbol$2);\n\nvar _typeof_1 = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _iterator2 = _interopRequireDefault(iterator$2);\n\n  var _symbol2 = _interopRequireDefault(symbol$2);\n\n  var _typeof = typeof _symbol2.default === \"function\" && _typeof2(_iterator2.default) === \"symbol\" ? function (obj) {\n    return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n  } : function (obj) {\n    return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);\n  };\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  }\n\n  exports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n    return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n  } : function (obj) {\n    return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n  };\n});\n\nvar _typeof = unwrapExports(_typeof_1);\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () {\n  return arguments;\n}()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function tryGet(it, key) {\n  try {\n    return it[key];\n  } catch (e) {/* empty */}\n};\n\nvar _classof = function _classof(it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n  // @@toStringTag case\n  : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n  // builtinTag case\n  : ARG ? _cof(O)\n  // ES3 arguments fallback\n  : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\nvar _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {\n    throw TypeError(name + ': incorrect invocation!');\n  }return it;\n};\n\n// call something on iterator step with safe closing on error\n\nvar _iterCall = function _iterCall(iterator, fn, value, entries) {\n  try {\n    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);\n    // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) _anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n// check on default Array iterator\n\nvar ITERATOR$1 = _wks('iterator');\nvar ArrayProto = Array.prototype;\n\nvar _isArrayIter = function _isArrayIter(it) {\n  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);\n};\n\nvar ITERATOR$2 = _wks('iterator');\n\nvar core_getIteratorMethod = _core.getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];\n};\n\nvar _forOf = createCommonjsModule(function (module) {\n  var BREAK = {};\n  var RETURN = {};\n  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n    var iterFn = ITERATOR ? function () {\n      return iterable;\n    } : core_getIteratorMethod(iterable);\n    var f = _ctx(fn, that, entries ? 2 : 1);\n    var index = 0;\n    var length, step, iterator, result;\n    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n    // fast case for arrays with default iterator\n    if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {\n      result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n      if (result === BREAK || result === RETURN) return result;\n    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n      result = _iterCall(iterator, f, step.value, entries);\n      if (result === BREAK || result === RETURN) return result;\n    }\n  };\n  exports.BREAK = BREAK;\n  exports.RETURN = RETURN;\n});\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\n\n\nvar SPECIES = _wks('species');\nvar _speciesConstructor = function _speciesConstructor(O, D) {\n  var C = _anObject(O).constructor;\n  var S;\n  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);\n};\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nvar _invoke = function _invoke(fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0:\n      return un ? fn() : fn.call(that);\n    case 1:\n      return un ? fn(args[0]) : fn.call(that, args[0]);\n    case 2:\n      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);\n    case 3:\n      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);\n    case 4:\n      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);\n  }return fn.apply(that, args);\n};\n\nvar process = _global.process;\nvar setTask = _global.setImmediate;\nvar clearTask = _global.clearImmediate;\nvar MessageChannel = _global.MessageChannel;\nvar Dispatch = _global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer;\nvar channel;\nvar port;\nvar run = function run() {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function listener(event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) {\n      args.push(arguments[i++]);\n    }queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      _invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (_cof(process) == 'process') {\n    defer = function defer(id) {\n      process.nextTick(_ctx(run, id, 1));\n    };\n    // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function defer(id) {\n      Dispatch.now(_ctx(run, id, 1));\n    };\n    // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = _ctx(port.postMessage, port, 1);\n    // Browsers with postMessage, skip WebWorkers\n    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {\n    defer = function defer(id) {\n      _global.postMessage(id + '', '*');\n    };\n    _global.addEventListener('message', listener, false);\n    // IE8-\n  } else if (ONREADYSTATECHANGE in _domCreate('script')) {\n    defer = function defer(id) {\n      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {\n        _html.removeChild(this);\n        run.call(id);\n      };\n    };\n    // Rest old browsers\n  } else {\n    defer = function defer(id) {\n      setTimeout(_ctx(run, id, 1), 0);\n    };\n  }\n}\nvar _task = {\n  set: setTask,\n  clear: clearTask\n};\n\nvar macrotask = _task.set;\nvar Observer = _global.MutationObserver || _global.WebKitMutationObserver;\nvar process$1 = _global.process;\nvar Promise$1 = _global.Promise;\nvar isNode = _cof(process$1) == 'process';\n\nvar _microtask = function _microtask() {\n  var head, last, notify;\n\n  var flush = function flush() {\n    var parent, fn;\n    if (isNode && (parent = process$1.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();else last = undefined;\n        throw e;\n      }\n    }last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function notify() {\n      process$1.nextTick(flush);\n    };\n    // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function notify() {\n      node.data = toggle = !toggle;\n    };\n    // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise$1 && Promise$1.resolve) {\n    var promise = Promise$1.resolve();\n    notify = function notify() {\n      promise.then(flush);\n    };\n    // for other environments - macrotask based on:\n    // - setImmediate\n    // - MessageChannel\n    // - window.postMessag\n    // - onreadystatechange\n    // - setTimeout\n  } else {\n    notify = function notify() {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(_global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    }last = task;\n  };\n};\n\n// 25.4.1.5 NewPromiseCapability(C)\n\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = _aFunction(resolve);\n  this.reject = _aFunction(reject);\n}\n\nvar f$7 = function f$7(C) {\n  return new PromiseCapability(C);\n};\n\nvar _newPromiseCapability = {\n  f: f$7\n};\n\nvar _perform = function _perform(exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\nvar _promiseResolve = function _promiseResolve(C, x) {\n  _anObject(C);\n  if (_isObject(x) && x.constructor === C) return x;\n  var promiseCapability = _newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\nvar _redefineAll = function _redefineAll(target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];else _hide(target, key, src[key]);\n  }return target;\n};\n\nvar SPECIES$1 = _wks('species');\n\nvar _setSpecies = function _setSpecies(KEY) {\n  var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];\n  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {\n    configurable: true,\n    get: function get() {\n      return this;\n    }\n  });\n};\n\nvar ITERATOR$3 = _wks('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR$3]();\n  riter['return'] = function () {\n    SAFE_CLOSING = true;\n  };\n  // eslint-disable-next-line no-throw-literal\n} catch (e) {/* empty */}\n\nvar _iterDetect = function _iterDetect(exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR$3]();\n    iter.next = function () {\n      return { done: safe = true };\n    };\n    arr[ITERATOR$3] = function () {\n      return iter;\n    };\n    exec(arr);\n  } catch (e) {/* empty */}\n  return safe;\n};\n\nvar task = _task.set;\nvar microtask = _microtask();\n\nvar PROMISE = 'Promise';\nvar TypeError$1 = _global.TypeError;\nvar process$2 = _global.process;\nvar $Promise = _global[PROMISE];\nvar isNode$1 = _classof(process$2) == 'process';\nvar empty = function empty() {/* empty */};\nvar Internal;\nvar newGenericPromiseCapability;\nvar OwnPromiseCapability;\nvar Wrapper;\nvar newPromiseCapability$1 = newGenericPromiseCapability = _newPromiseCapability.f;\n\nvar USE_NATIVE$1 = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) {/* empty */}\n}();\n\n// helpers\nvar isThenable = function isThenable(it) {\n  var then;\n  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function notify(promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function run(reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError$1('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) {\n      run(chain[i++]);\n    } // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function onUnhandled(promise) {\n  task.call(_global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = _perform(function () {\n        if (isNode$1) {\n          process$2.emit('unhandledRejection', value, promise);\n        } else if (handler = _global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = _global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;\n    }promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function isUnhandled(promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function onHandleUnhandled(promise) {\n  task.call(_global, function () {\n    var handler;\n    if (isNode$1) {\n      process$2.emit('rejectionHandled', promise);\n    } else if (handler = _global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function $reject(value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function $resolve(value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError$1(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE$1) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    _anInstance(this, $Promise, PROMISE, '_h');\n    _aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = []; // <- awaiting reactions\n    this._a = undefined; // <- checked in isUnhandled reactions\n    this._s = 0; // <- state\n    this._d = false; // <- done\n    this._v = undefined; // <- value\n    this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false; // <- notify\n  };\n  Internal.prototype = _redefineAll($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability$1(_speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode$1 ? process$2.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function _catch(onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function OwnPromiseCapability() {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = _ctx($resolve, promise, 1);\n    this.reject = _ctx($reject, promise, 1);\n  };\n  _newPromiseCapability.f = newPromiseCapability$1 = function newPromiseCapability$1(C) {\n    return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });\n_setToStringTag($Promise, PROMISE);\n_setSpecies(PROMISE);\nWrapper = _core[PROMISE];\n\n// statics\n_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability$1(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n_export(_export.S + _export.F * (_library || !USE_NATIVE$1), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);\n  }\n});\n_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability$1(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = _perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      _forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability$1(C);\n    var reject = capability.reject;\n    var result = _perform(function () {\n      _forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n\n_export(_export.P + _export.R, 'Promise', { 'finally': function _finally(onFinally) {\n    var C = _speciesConstructor(this, _core.Promise || _global.Promise);\n    var isFunction = typeof onFinally == 'function';\n    return this.then(isFunction ? function (x) {\n      return _promiseResolve(C, onFinally()).then(function () {\n        return x;\n      });\n    } : onFinally, isFunction ? function (e) {\n      return _promiseResolve(C, onFinally()).then(function () {\n        throw e;\n      });\n    } : onFinally);\n  } });\n\n// https://github.com/tc39/proposal-promise-try\n\n\n_export(_export.S, 'Promise', { 'try': function _try(callbackfn) {\n    var promiseCapability = _newPromiseCapability.f(this);\n    var result = _perform(callbackfn);\n    (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n    return promiseCapability.promise;\n  } });\n\nvar promise = _core.Promise;\n\nvar promise$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": promise, __esModule: true };\n});\n\nvar _Promise = unwrapExports(promise$2);\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) {\n    B[k] = k;\n  });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) {\n  // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n    }\n  }return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\nvar assign$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": assign, __esModule: true };\n});\n\nunwrapExports(assign$2);\n\nvar _extends = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _assign2 = _interopRequireDefault(assign$2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  }\n\n  exports.default = _assign2.default || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n});\n\nvar _extends$1 = unwrapExports(_extends);\n\nvar classCallCheck = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  exports.default = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n});\n\nvar _classCallCheck = unwrapExports(classCallCheck);\n\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });\n\nvar $Object = _core.Object;\nvar defineProperty$1 = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n\nvar defineProperty$3 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": defineProperty$1, __esModule: true };\n});\n\nunwrapExports(defineProperty$3);\n\nvar createClass = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _defineProperty2 = _interopRequireDefault(defineProperty$3);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  }\n\n  exports.default = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n});\n\nvar _createClass = unwrapExports(createClass);\n\nvar Mediator = function () {\n  function Mediator() {\n    _classCallCheck(this, Mediator);\n\n    this._topics = {};\n  }\n\n  /**\n   * Subscribe to the given topic with the given callback.\n   *\n   * @param {String} topic\n   * @param {Function} callback\n   * @return {boolean}\n   */\n\n  /**\n   * The topics to subscribe to.\n   *\n   * @var {Object}\n   */\n\n  _createClass(Mediator, [{\n    key: \"on\",\n    value: function on(topic, callback) {\n      if (!this._topics.hasOwnProperty(topic)) {\n        this._topics[topic] = [];\n      }\n      this._topics[topic].push(callback);\n\n      return true;\n    }\n\n    /**\n     * Unsubscibe the given callback from the given topic.\n     *\n     * @param {String} topic\n     * @param {Function} callback\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"un\",\n    value: function un(topic) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // If the topic does not exist, return early\n      if (!this._topics.hasOwnProperty(topic)) {\n        return false;\n      }\n\n      // If a callback is provided, unsubscribe it, but keep the topic and any\n      // other callbacks currently registered\n      if (callback) {\n        for (var i = 0; i < this._topics[topic].length; i++) {\n          if (this._topics[topic][i] === callback) {\n            this._topics[topic].splice(i, 1);\n            return true;\n          }\n        }\n\n        // A callback was provided, but was not previously registered\n        return false;\n      }\n\n      // Delete the whole topic\n      delete this._topics[topic];\n\n      return true;\n    }\n\n    /**\n     * Unsubscribe from all topic.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: \"unAll\",\n    value: function unAll() {\n      this._topics = null;\n    }\n\n    /**\n     * Fire an event and evaluate any registered callbacks in response.\n     *\n     * @param {String} topic\n     * @param {mixed} args\n     * @return {boolean}\n     */\n\n  }, {\n    key: \"fire\",\n    value: function fire(topic) {\n      if (!this._topics.hasOwnProperty(topic)) {\n        return false;\n      }\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0; i < this._topics[topic].length; i++) {\n        this._topics[topic][i].apply(null, args);\n      }\n\n      return true;\n    }\n  }]);\n\n  return Mediator;\n}();\n\n/*********************\n * UTILITY FUNCTIONS *\n *********************/\n\n/**\n * Convert a hex color code to RGB format.\n *\n * @param {string} hex\n * @return {object}\n */\nvar hex2rgb = function hex2rgb(hex) {\n  var bigint = parseInt(hex.charAt(0) === '#' ? hex.substring(1, 7) : hex, 16);\n\n  return { r: bigint >> 16 & 255, g: bigint >> 8 & 255, b: bigint & 255 };\n};\n\n/**\n * Convert a color in RGB format to a color in HSV format.\n *\n * @param {object} rgb\n * @return {object}\n */\nvar rgb2hsv = function rgb2hsv(rgb) {\n  var r = rgb.r / 255,\n      g = rgb.g / 255,\n      b = rgb.b / 255;\n  var v = Math.max(r, g, b);\n  var diff = v - Math.min(r, g, b);\n  var diffc = function diffc(c) {\n    return (v - c) / 6 / diff + 1 / 2;\n  };\n\n  if (diff === 0) {\n    return { h: 0, s: 0, v: Math.round(v * 100) };\n  }\n\n  var h = void 0;\n  var s = diff / v;\n  var rr = diffc(r),\n      gg = diffc(g),\n      bb = diffc(b);\n\n  if (r === v) {\n    h = bb - gg;\n  } else if (g === v) {\n    h = 1 / 3 + rr - bb;\n  } else if (b === v) {\n    h = 2 / 3 + gg - rr;\n  }\n\n  if (h < 0) {\n    h++;\n  } else if (h > 1) {\n    h--;\n  }\n\n  return { h: Math.round(h * 360), s: Math.round(s * 100), v: Math.round(v * 100) };\n};\n\n/**\n * Conver a color in HSV format to a color in RGB format.\n *\n * @param {object} hsv\n * @return {object}\n */\nvar hsv2rgb = function hsv2rgb(hsv) {\n  if (hsv.s === 0) {\n    return { r: hsv.v, g: hsv.v, b: hsv.v };\n  }\n\n  var h = hsv.h / 60,\n      i = Math.floor(h),\n      s = hsv.s / 100,\n      v = hsv.v / 100 * 255;\n  var data = [v * (1 - s), v * (1 - s * (h - i)), v * (1 - s * (1 - (h - i)))];\n  switch (i) {\n    case 0:\n      return { r: v, g: data[2], b: data[0] };\n    case 1:\n      return { r: data[1], g: v, b: data[0] };\n    case 2:\n      return { r: data[0], g: v, b: data[2] };\n    case 3:\n      return { r: data[0], g: data[1], b: v };\n    case 4:\n      return { r: data[2], g: data[0], b: v };\n    default:\n      return { r: v, g: data[0], b: data[1] };\n  }\n};\n\n/**\n * Fetch a JSON file from the given URL.\n *\n * @param {string} url\n * @return {promise}\n */\nvar getJSON = function getJSON(url) {\n  return new _Promise(function (resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          resolve(JSON.parse(xhr.responseText));\n        } else {\n          reject(new Error(xhr.statusText));\n        }\n      }\n    };\n    xhr.send();\n  });\n};\n\n/**\n * Convert a generator into a promise resolving state machine.\n *\n * @param {generator} generatorFunction\n * @return {promise}\n */\nvar stateResolver = function stateResolver(generatorFunction) {\n  return function () {\n    var generator = generatorFunction.apply(this, arguments);\n    return new _Promise(function (resolve, reject) {\n      var resume = function resume(method, value) {\n        try {\n          var result = generator[method](value);\n          if (result.done) {\n            resolve(result.value);\n          } else {\n            result.value.then(resumeNext, resumeThrow);\n          }\n        } catch (e) {\n          reject(e);\n        }\n      };\n      var resumeNext = resume.bind(null, 'next');\n      var resumeThrow = resume.bind(null, 'throw');\n      resumeNext();\n    });\n  };\n};\n\n/**\n * Set the CSS styles for the given element.\n *\n * @param {object} elm\n * @param {object} styles\n * @return {object}\n */\nvar style = function style(elm, styles) {\n  for (var key in styles) {\n    if (elm.style[key] !== styles[key]) {\n      elm.style[key] = styles[key];\n    }\n  }\n\n  return elm;\n};\n\n/**\n * Check if the given value is an objet\n *\n * @param {mixed} value\n * @return {boolean}\n */\nvar isObject$1 = function isObject(value) {\n  return value === Object(value);\n};\n\n/**\n * waveview.js\n *\n * © Michaël Dzjaparidze 2017\n * https://github.com/michaeldzjap\n *\n * Draws a waveform using the HTML5 canvas object\n *\n * This work is licensed under the ISC License (ISC)\n */\n\nvar WaveView = function () {\n\n  /**\n   * Initialize a new waveview instance.\n   *\n   * @param {Array} data\n   * @param {Object} options\n   * @return {void}\n   */\n\n  /**\n   * The color variations that will be used for drawing the waveform.\n   *\n   * @var {Object};\n   */\n\n  /**\n   * The HTML container element for the canvas element.\n   *\n   * @var {Object}\n   */\n\n  /**\n   * The options for this waveplayer instance.\n   *\n   * @var {Object}\n   */\n\n  /**\n   * The default options for a new instance.\n   *\n   * @var {Object}\n   */\n  function WaveView(data, options) {\n    _classCallCheck(this, WaveView);\n\n    this._defaultOptions = {\n      container: null,\n      width: 512,\n      height: 128,\n      waveColor: '#428bca',\n      progressColor: '#31708f',\n      barWidth: 4,\n      barGap: 1,\n      interact: true,\n      responsive: true,\n      progress: 0\n    };\n    this._progress = 0;\n\n    // Create a new mediator if there does not exist one yet\n    if (!WavePlayer._mediator) {\n      WavePlayer._mediator = new Mediator();\n    }\n\n    this._data = data;\n    this._options = _extends$1({}, this._defaultOptions, options);\n    this.container = 'string' === typeof this._options.container ? document.querySelector(this._options.container) : this._options.container;\n\n    this._createWaveContainer();\n    this._colors = this._createColorVariations();\n    this._initializeResizeHandler();\n  }\n\n  /************************\n   * Getters and setters. *\n   ************************/\n\n  /**\n   * Get the HTML container element for the waveview instance.\n   *\n   * @return {Object}\n   */\n\n  /**\n   * The progress in the range [0-1] of the waveform.\n   *\n   * @var {Number}\n   */\n\n  /**\n   * The HTML canvas element context.\n   *\n   * @var {Object}\n   */\n\n  /**\n   * The HTML container element for the waveview instance.\n   *\n   * @var {Object}\n   */\n\n  /**\n   * The amplitude data that will be used to draw the waveform.\n   *\n   * @var {Array}\n   */\n\n  _createClass(WaveView, [{\n    key: 'drawWave',\n\n    /*********************\n     * Public functions. *\n     *********************/\n\n    /**\n     * Draw a waveform from supplied waveform data.\n     *\n     * @param {Array} values\n     * @param {Number} progress\n     * @param {void}\n     */\n    value: function drawWave(values, progress) {\n      this.data = values;\n      this._progress = progress;\n      this._barData = this._calcAvgAmps();\n      this.clearWave();\n      this._drawBars(this._progress * this._waveContainer.clientWidth);\n    }\n\n    /**\n     * Update an existing waveform.\n     *\n     * @param {Number} progress\n     * @return {void}\n     */\n\n  }, {\n    key: 'updateWave',\n    value: function updateWave(progress) {\n      if (progress) {\n        this._progress = progress;\n      }\n      this.clearWave();\n      this._drawBars(this._progress * this._waveContainer.clientWidth);\n    }\n\n    /**\n     * Clear the canvas HTML element where the waveform is drawn in.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'clearWave',\n    value: function clearWave() {\n      this._canvasContext.clearRect(0, 0, this._canvasContext.canvas.width, this._canvasContext.canvas.height);\n    }\n\n    /**\n     * Destroy the waveview instance and do the appropriate clean up.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._removeCanvasHandlers();\n      if (this._resizeHandler) {\n        window.removeEventListener('resize', this._resizeHandler);\n      }\n      WavePlayer._mediator.unAll();\n      this._waveContainer && this._container.removeChild(this._waveContainer);\n      this._waveContainer = null;\n    }\n\n    /**********************\n     * Private functions. *\n     **********************/\n\n    /**\n     * Create the HTML container element for the HTML canvas element in which we\n     * will draw the waveform.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: '_createWaveContainer',\n    value: function _createWaveContainer() {\n      this._waveContainer = document.createElement('div');\n      this._waveContainer.className = 'waveform-container';\n      this._container.appendChild(this._waveContainer);\n      style(this._waveContainer, {\n        display: 'block',\n        position: 'relative',\n        width: this._options.responsive ? '100%' : this._options.width + 'px',\n        height: this._options.height + 'px',\n        overflow: 'hidden'\n      });\n      this._createCanvas();\n    }\n\n    /**\n     * Create the HTML canvas element in which we will draw the waveform.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: '_createCanvas',\n    value: function _createCanvas() {\n      var clientWidth = this._waveContainer.clientWidth;\n      var canvas = this._waveContainer.appendChild(style(document.createElement('canvas'), {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        zIndex: 1,\n        height: this._options.height + 'px',\n        width: clientWidth + 'px' // for responsive, enough to set this to 100% ???\n      }));\n      this._canvasContext = canvas.getContext('2d');\n      this._canvasContext.canvas.width = clientWidth;\n      this._canvasContext.canvas.height = this._options.height;\n      if (this._options.interact) {\n        this._addCanvasHandlers();\n      }\n    }\n\n    /**\n     * Add a canvas click handler.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: '_addCanvasHandlers',\n    value: function _addCanvasHandlers() {\n      var _this = this;\n\n      this._mouseClickHandler = function (e) {\n        return WavePlayer._mediator.fire('waveview:clicked', _this._coord2Progress(e));\n      };\n      this._canvasContext.canvas.addEventListener('click', this._mouseClickHandler.bind(this));\n    }\n\n    /**\n     * Remove the canvas click handler.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: '_removeCanvasHandlers',\n    value: function _removeCanvasHandlers() {\n      if (this._mouseClickHandler) {\n        this.canvasContect.canvas.removeEventListener('click', this._mouseClickHandler);\n      }\n    }\n\n    /**\n     * Create a color stop variation for the colors provided (used for drawing\n     * the gradient).\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: '_createColorVariations',\n    value: function _createColorVariations() {\n      var colors = { waveColor: [], progressColor: [] };\n\n      for (var c in colors) {\n        var tmp = hex2rgb(this._options[c]);\n        colors[c].push(tmp);\n        tmp = rgb2hsv(tmp);\n        colors[c].push(hsv2rgb({ h: tmp.h, s: tmp.s, v: tmp.v * 1.4 }));\n      }\n\n      colors.dc = {\n        r: colors.waveColor[0].r - colors.progressColor[0].r,\n        g: colors.waveColor[0].g - colors.progressColor[0].g,\n        b: colors.waveColor[0].b - colors.progressColor[0].b\n      };\n\n      return colors;\n    }\n\n    /**\n     * Initialize the resize handler for the waveview. If the waveview instance\n     * is not in responsive mode we do nothing on a resize event, meaning the wave\n     * will not be redrawn. If we are in responsive mode the width of the canvas\n     * is rescaled and hence the waveform needs to be redrawn after this.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: '_initializeResizeHandler',\n    value: function _initializeResizeHandler() {\n      var _this2 = this;\n\n      if (!this._options.responsive) {\n        if (this._resizeHandler) {\n          window.removeEventListener('resize', this._resizeHandler);\n        }\n        style(this._waveContainer, { width: this._options.width });\n\n        return;\n      }\n\n      style(this._waveContainer, { width: '100%' });\n\n      if (this._resizeHandler) {\n        window.removeEventListener('resize', this._resizeHandler);\n      }\n\n      this._resizeHandler = function () {\n        var width = _this2._waveContainer.clientWidth;\n        style(_this2._canvasContext.canvas, { width: width + 'px' });\n        _this2._canvasContext.canvas.width = width;\n        _this2._barData = _this2._calcAvgAmps();\n        _this2.updateWave(_this2._progress);\n      };\n      window.addEventListener('resize', this._resizeHandler);\n    }\n\n    /**\n     * Compute average absolute waveform amplitudes.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: '_calcAvgAmps',\n    value: function _calcAvgAmps() {\n      var _this3 = this;\n\n      // Compute amplitude by averaging over n values in the range [rangeL, rangeR]\n      var avgAmp = function avgAmp(dataIndex, rangeL, rangeR, n) {\n        var sum = 0.0;\n        for (var _i = rangeL; _i <= rangeR; _i++) {\n          sum += Math.abs(_this3._data[dataIndex + _i]);\n        }\n\n        return sum / n;\n      };\n\n      var totalWidth = this._waveContainer.clientWidth;\n      var ratio = totalWidth !== this._data.length ? this._data.length / totalWidth : 1;\n      var totalBarWidth = this._options.barWidth + this._options.barGap;\n      var rangeR = (totalBarWidth - 1) / 2;\n      var rangeL = -~~rangeR;\n      var incr = totalBarWidth * ratio;\n      var bd = { amps: [], x: [] };\n      rangeR = Math.round(rangeR);\n\n      bd.amps.push(avgAmp(0, 0, rangeR, totalBarWidth));\n      bd.x.push(0);\n      var i, j;\n      for (i = totalBarWidth, j = incr; j + rangeR < this._data.length; i += totalBarWidth, j += incr) {\n        bd.amps.push(avgAmp(~~j, rangeL, rangeR, totalBarWidth));\n        bd.x.push(i);\n      }\n\n      // See if we can squeeze in one more bar\n      j = ~~j;\n      rangeR = -(j - this._data.length + 1);\n      if (i <= totalWidth - totalBarWidth && rangeR > rangeL) {\n        bd.amps.push(avgAmp(j, rangeL, rangeR, rangeR - rangeL));\n        bd.x.push(i);\n      }\n\n      bd.norm = 1 / Math.max.apply(Math, bd.amps);\n\n      return bd;\n    }\n\n    /**\n     * Draw the individual waveform bars with a gradient.\n     *\n     * @param {Number} progressCoord\n     * @return {void}\n     */\n\n  }, {\n    key: '_drawBars',\n    value: function _drawBars(progressCoord) {\n      var ctx = this._canvasContext;\n      var h0 = ctx.canvas.height;\n      var totalBarWidth = this._options.barWidth + this._options.barGap;\n      var changeGrad = true;\n      var gradient = this._generateGradient(this._colors.progressColor, h0);\n\n      ctx.fillStyle = gradient;\n\n      for (var i = 0; i < this._barData.x.length; i++) {\n        var xpos = this._barData.x[i];\n        if (xpos >= progressCoord - totalBarWidth && changeGrad) {\n          if (xpos >= progressCoord) {\n            // gradient rule for bars after currently playing bar\n            gradient = this._generateGradient(this._colors.waveColor, h0);\n            ctx.fillStyle = gradient;\n            changeGrad = false; // more efficient: avoids changing this gradient rule multiple times per single function call\n          } else {\n            // fade between colors when on currently playing bar\n            var incr = (progressCoord - xpos) / totalBarWidth;\n            var c1 = {\n              r: this._colors.waveColor[0].r - this._colors.dc.r * incr,\n              g: this._colors.waveColor[0].g - this._colors.dc.g * incr,\n              b: this._colors.waveColor[0].b - this._colors.dc.b * incr\n            };\n            var c2 = rgb2hsv(c1);\n            c2 = hsv2rgb({ h: c2.h, s: c2.s, v: c2.v * 1.4 });\n            gradient = this._generateGradient([c1, c2], h0);\n            ctx.fillStyle = gradient;\n          }\n        }\n        var h = Math.max(h0 * this._barData.amps[i] * this._barData.norm, 0.5);\n        ctx.fillRect(xpos, (h0 - h) / 2, this._options.barWidth, h);\n      }\n    }\n\n    /**\n     * Generate a linear gradient from the provided colors.\n     *\n     * @param {Array} c\n     * @param {Number} h\n     * @return {Object}\n     */\n\n  }, {\n    key: '_generateGradient',\n    value: function _generateGradient(c, h) {\n      var grd = this._canvasContext.createLinearGradient(0, 0, 0, h);\n      var c1 = 'rgba(' + ~~c[1].r + ', ' + ~~c[1].g + ', ' + ~~c[1].b + ', 1)';\n      grd.addColorStop(0.0, c1);\n      grd.addColorStop(0.3, 'rgba(' + ~~c[0].r + ', ' + ~~c[0].g + ', ' + ~~c[0].b + ', 1)');\n      grd.addColorStop(1.0, c1);\n\n      return grd;\n    }\n\n    /**\n     * Calculate the x-coordinate of the current mouse position. The origin is\n     * assumed to be at the location of the waveform container HTML element.\n     *\n     * @param {MouseEvent} e\n     * @return {Number}\n     */\n\n  }, {\n    key: '_calcMouseCoordX',\n    value: function _calcMouseCoordX(e) {\n      e.preventDefault();\n      return e.clientX - this._waveContainer.getBoundingClientRect().left;\n    }\n\n    /**\n     * Convert a coordinate to a progress in the range [0-1].\n     *\n     * @param {MouseEvent} e\n     * @return {Number}\n     */\n\n  }, {\n    key: '_coord2Progress',\n    value: function _coord2Progress(e) {\n      return this._calcMouseCoordX(e) / this._waveContainer.clientWidth;\n    }\n  }, {\n    key: 'container',\n    get: function get() {\n      return this._container;\n    }\n\n    /**\n     * Set the HTML container element for the waveview instance.\n     *\n     * @param {Object} container\n     * @return {void}\n     */\n\n    , set: function set(container) {\n      if (!container) {\n        throw new Error('Please supply a valid container element');\n      }\n\n      this._container = container;\n    }\n\n    /**\n     * Get the waveform amplitude data.\n     *\n     * @return {Array}\n     */\n\n  }, {\n    key: 'data',\n    get: function get() {\n      return this._data;\n    }\n\n    /**\n     * Set the waveform amplitude data.\n     *\n     * @param {Array} values\n     * @return {void}\n     */\n\n    , set: function set(values) {\n      this._data = values;\n    }\n\n    /**\n     * Check if we can currently interact with the waveview instance.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'interact',\n    get: function get() {\n      return this._options.interact;\n    }\n\n    /**\n     * Set the interaction state of the waveview instance.\n     *\n     * @param {boolean} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._options.interact = value;\n      if (value) {\n        this._addCanvasHandlers();\n      } else {\n        this._removeCanvasHandlers();\n      }\n    }\n\n    /**\n     * Check if the waveview instance is operating in responsive mode.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'responsive',\n    get: function get() {\n      return this._options.responsive;\n    }\n\n    /**\n     * Make the waveview instance responsive, meaning its width will scale along\n     * with the width of its parent container.\n     *\n     * @param {boolean} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._options.responsive = value;\n      this._initializeResizeHandler();\n    }\n\n    /**\n     * Get the width of the drawn waveform.\n     *\n     * @return {Number}\n     */\n\n  }, {\n    key: 'width',\n    get: function get() {\n      return this._waveContainer.clientWidth;\n    }\n\n    /**\n     * Set the width of the drawn waveform. Only has an effect if the waveview\n     * instance is not operating in responsive mode.\n     *\n     * @param {Number} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._options.width = value;\n      if (!this._options.responsive) {\n        style(this._waveContainer, { width: this._options.width + 'px' });\n        style(this._canvasContext.canvas, { width: this._options.width + 'px' });\n        this._canvasContext.canvas.width = this._options.width;\n        this._barData = this._calcAvgAmps();\n      }\n    }\n\n    /**\n     * Get the height of the drawn waveform.\n     *\n     * @return {Number}\n     */\n\n  }, {\n    key: 'height',\n    get: function get() {\n      return this._waveContainer.clientHeight;\n    }\n\n    /**\n     * Set the height of the drawn waveform.\n     *\n     * @param {Number} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._options.height = value;\n      style(this._waveContainer, { height: this._options.height + 'px' });\n      style(this.canvasContext.canvas, { height: this._options.height + 'px' });\n      this._canvasContext.canvas.height = this._options.height;\n      this._barData = this._calcAvgAmps();\n    }\n  }]);\n\n  return WaveView;\n}();\n\nvar runtime = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  !function (global) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    var inModule = 'object' === \"object\";\n    var runtime = global.regeneratorRuntime;\n    if (runtime) {\n      if (inModule) {\n        // If regeneratorRuntime is defined globally and we're in a module,\n        // make the exports object identical to regeneratorRuntime.\n        module.exports = runtime;\n      }\n      // Don't bother evaluating the rest of this file if the runtime was\n      // already defined globally.\n      return;\n    }\n\n    // Define the runtime globally (as expected by generated code) as either\n    // module.exports (if we're in a module) or a new, empty object.\n    runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []);\n\n      // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n      return generator;\n    }\n    runtime.wrap = wrap;\n\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n      try {\n        return { type: \"normal\", arg: fn.call(obj, arg) };\n      } catch (err) {\n        return { type: \"throw\", arg: err };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        prototype[method] = function (arg) {\n          return this._invoke(method, arg);\n        };\n      });\n    }\n\n    runtime.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction ||\n      // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    runtime.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        if (!(toStringTagSymbol in genFun)) {\n          genFun[toStringTagSymbol] = \"GeneratorFunction\";\n        }\n      }\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    };\n\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    runtime.awrap = function (arg) {\n      return { __await: arg };\n    };\n\n    function AsyncIterator(generator) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n          if (value && (typeof value === 'undefined' ? 'undefined' : _typeof2(value)) === \"object\" && hasOwn.call(value, \"__await\")) {\n            return Promise.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return Promise.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration. If the Promise is rejected, however, the\n            // result for this iteration will be rejected with the same\n            // reason. Note that rejections of yielded Promises are not\n            // thrown back into the generator function, as is the case\n            // when an awaited Promise is rejected. This difference in\n            // behavior between yield and await is important, because it\n            // allows the consumer to decide what to do with the yielded\n            // rejection (swallow it and continue, manually .throw it back\n            // into the generator, abandon iteration, whatever). With\n            // await, by contrast, there is no opportunity to examine the\n            // rejection reason outside the generator function, so the\n            // only option is to throw it from the await expression, and\n            // let the generator function handle the exception.\n            result.value = unwrapped;\n            resolve(result);\n          }, reject);\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new Promise(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,\n        // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n\n      // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n    runtime.AsyncIterator = AsyncIterator;\n\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    runtime.async = function (innerFn, outerFn, self, tryLocsList) {\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));\n\n      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          }\n\n          // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n\n          var record = tryCatch(innerFn, self, context);\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted;\n            // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    }\n\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n      if (method === undefined) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          if (delegate.iterator.return) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value;\n\n        // Resume execution at the desired location (see delegateYield).\n        context.next = delegate.nextLoc;\n\n        // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      }\n\n      // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n\n    Gp[toStringTagSymbol] = \"Generator\";\n\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = { tryLoc: locs[0] };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{ tryLoc: \"root\" }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    runtime.keys = function (object) {\n      var keys = [];\n      for (var key in object) {\n        keys.push(key);\n      }\n      keys.reverse();\n\n      // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        }\n\n        // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined;\n            next.done = true;\n\n            return next;\n          };\n\n          return next.next = next;\n        }\n      }\n\n      // Return an iterator with no values.\n      return { next: doneResult };\n    }\n    runtime.values = values;\n\n    function doneResult() {\n      return { value: undefined, done: true };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n\n      reset: function reset(skipTempReset) {\n        this.prev = 0;\n        this.next = 0;\n        // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n        this.sent = this._sent = undefined;\n        this.done = false;\n        this.delegate = null;\n\n        this.method = \"next\";\n        this.arg = undefined;\n\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined;\n            }\n          }\n        }\n      },\n\n      stop: function stop() {\n        this.done = true;\n\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n\n      dispatchException: function dispatchException(exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n\n      abrupt: function abrupt(type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n\n      complete: function complete(record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n\n      finish: function finish(finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n\n      \"catch\": function _catch(tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n            return thrown;\n          }\n        }\n\n        // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n        throw new Error(\"illegal catch attempt\");\n      },\n\n      delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined;\n        }\n\n        return ContinueSentinel;\n      }\n    };\n  }(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  function () {\n    return this;\n  }() || Function(\"return this\")());\n});\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = function () {\n  return this;\n}() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nvar runtimeModule = runtime;\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch (e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\nvar regenerator = runtimeModule;\n\nvar _createProperty = function _createProperty(object, index, value) {\n  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));else object[index] = value;\n};\n\n_export(_export.S + _export.F * !_iterDetect(function (iter) {}), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = _toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = core_getIteratorMethod(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = _toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\nvar from = _core.Array.from;\n\nvar from$2 = createCommonjsModule(function (module) {\n  module.exports = { \"default\": from, __esModule: true };\n});\n\nunwrapExports(from$2);\n\nvar toConsumableArray = createCommonjsModule(function (module, exports) {\n  exports.__esModule = true;\n\n  var _from2 = _interopRequireDefault(from$2);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  }\n\n  exports.default = function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return (0, _from2.default)(arr);\n    }\n  };\n});\n\nvar _toConsumableArray = unwrapExports(toConsumableArray);\n\n/**\n * playlist.js\n *\n * © Michaël Dzjaparidze 2017\n * http://www.michaeldzjaparidze.com, https://github.com/michaeldzjap\n *\n * Playlist functionality for waveplayer.js\n *\n * This work is licensed under the ISC License (ISC)\n */\n\nvar Playlist = function () {\n\n  /**\n   * Initialize a new playlist instance.\n   *\n   * @param {audio} audioElm\n   * @param {Array} urls\n   * @param {Object} options\n   * @return {void}\n   */\n\n  /**\n   * The index of the current track that is selected in the playlist.\n   *\n   * @var {Number}\n   */\n\n  /**\n   * The URL's pointing to the audio files that make up the playlist.\n   *\n   * @var {Array}\n   */\n\n  /**\n   * The scheduler instance used for handling a playlist.\n   *\n   * @var {Object}\n   */\n\n  /**\n   * The default options for a new instance.\n   *\n   * @var {Object}\n   */\n  function Playlist(wavePlayer, urls) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Playlist);\n\n    this._defaultOptions = {\n      autoPlay: false\n    };\n    this._skipped = false;\n\n    if (!urls || !(urls instanceof Array)) {\n      throw new TypeError('Argument \\'urls\\' is invalid.');\n    }\n\n    if (urls.length === 0) {\n      throw new Error('Argument \\'urls\\' needs to contain at least 1 item.');\n    }\n\n    if (!isObject$1(options)) {\n      throw new TypeError('Argument \\'options\\' is invalid.');\n    }\n\n    // Create a new mediator if there does not exist one yet\n    if (!WavePlayer._mediator) {\n      WavePlayer._mediator = new Mediator();\n    }\n\n    // Merge any supplied options with default options\n    this._options = _extends$1({}, this._defaultOptions, options);\n    this._wavePlayer = wavePlayer;\n    this._urls = [].concat(_toConsumableArray(urls));\n    this._audioElm = this._wavePlayer._audioElm;\n    this._scheduler = this._createScheduler(urls, this._options.autoplay);\n  }\n\n  /**\n   * Go to the next track in the playlist.\n   *\n   * @return {void}\n   */\n\n  /**\n   * Indicates if the user skipped to a different track in the playlist.\n   *\n   * @param {boolean}\n   */\n\n  /**\n   * The HTML audio element associated with a waveplayer instance.\n   *\n   * @var {audio}\n   */\n\n  /**\n   * The waveplayer instance associated with this playlist instance.\n   *\n   * @var {WavePlayer}\n   */\n\n  /**\n   * The options for this playlist instance.\n   *\n   * @var {Object}\n   */\n\n  _createClass(Playlist, [{\n    key: 'next',\n    value: function next() {\n      if (this._currentTrackIndex < this._urls.length) {\n        this._skipped = true;\n        this._audioElm.dispatchEvent(new Event('ended'));\n      }\n    }\n\n    /**\n     * Go to the previous track in the playlist.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'previous',\n    value: function previous() {\n      if (this._currentTrackIndex > 0) {\n        this._currentTrackIndex -= 2;\n        this._skipped = true;\n        this._audioElm.dispatchEvent(new Event('ended'));\n      }\n    }\n\n    /**\n     * Skip to a specific track in the playlist.\n     *\n     * @param {Number} trackNumber\n     * @return {void}\n     */\n\n  }, {\n    key: 'skipTo',\n    value: function skipTo(trackNumber) {\n      var trackIndex = trackNumber - 1;\n      if (trackIndex !== this._currentTrackIndex && trackIndex < this._urls.length && trackIndex >= 0) {\n        this._currentTrackIndex = trackIndex - 1;\n        this._skipped = true;\n        this._audioElm.dispatchEvent(new Event('ended'));\n      }\n    }\n\n    /**\n     * Destroy the playlist instance and do the appropriate clean up.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._wavePlayer.pause();\n      this._scheduler = null;\n    }\n\n    /**\n     * Create a new scheduler for the playlist instance.\n     *\n     * @param {array} urls\n     * @param {boolean} autoPlay\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_createScheduler',\n    value: function _createScheduler(urls, autoPlay) {\n      var _this = this;\n\n      this._currentTrackIndex = 0;\n      var scheduler = stateResolver( /*#__PURE__*/regenerator.mark(function _callee(urls) {\n        return regenerator.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this._currentTrackIndex < urls.length)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 3;\n                return this._wavePlayer.load(urls[this._currentTrackIndex]);\n\n              case 3:\n                if (this._currentTrackIndex > 0) {\n                  WavePlayer._mediator.fire('waveplayer:playlist:next', this._wavePlayer, { url: urls[this._currentTrackIndex], trackNumber: this._currentTrackIndex + 1 });\n                  this._wavePlayer.play();\n                } else {\n                  WavePlayer._mediator.fire('waveplayer:playlist:ready', this._wavePlayer);\n                  if (autoPlay || this._skipped) {\n                    this._wavePlayer.play();\n                  }\n                }\n                // Wait until the current track finishes playing\n                _context.next = 6;\n                return this._onEnd();\n\n              case 6:\n                this._currentTrackIndex++;\n                _context.next = 0;\n                break;\n\n              case 9:\n                return _context.abrupt('return', this._currentTrackIndex);\n\n              case 10:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      })).bind(this);\n\n      scheduler(urls).then(function (response) {\n        _this._skipped = false;\n        WavePlayer._mediator.fire('waveplayer:playlist:finished', _this._wavePlayer, response);\n      });\n\n      return scheduler;\n    }\n\n    /**\n    * Return a promise that resolves itself when the HTML audio element fires an\n    * 'ended' event (i.e. when an audio track finished playing).\n    *\n    * @return {Promise}\n    */\n\n  }, {\n    key: '_onEnd',\n    value: function _onEnd() {\n      var _this2 = this;\n\n      return new _Promise(function (resolve) {\n        if (_this2._ended) {\n          _this2._audioElm.removeEventListener('ended', _this2._ended);\n        }\n        _this2._ended = function () {\n          return resolve('ended');\n        };\n        _this2._audioElm.addEventListener('ended', _this2._ended.bind(_this2));\n      });\n    }\n  }]);\n\n  return Playlist;\n}();\n\n/**\n * waveplayer.js\n *\n * © Michaël Dzjaparidze 2017\n * https://github.com/michaeldzjap\n *\n * A HTML5 based audio player with a waveform view\n *\n * This work is licensed under the ISC License (ISC)\n */\n\nvar WavePlayer = function () {\n\n  /**\n   * Initialize a new waveplayer instance.\n   *\n   * @param {Object} options\n   * @return {void}\n   */\n\n  /**\n   * The HTML audio element associated with this waveplayer instance.\n   *\n   * @var {audio}\n   */\n\n  /**\n   * The mediator singleton that will be used to listen to events and fire actions\n   * in response.\n   *\n   * @var {Object}\n   */\n  function WavePlayer(options) {\n    var _this = this;\n\n    _classCallCheck(this, WavePlayer);\n\n    // Create a new mediator if there does not exist one yet\n    if (!WavePlayer._mediator) {\n      WavePlayer._mediator = new Mediator();\n    }\n\n    this._waveView = new WaveView(null, _extends$1({}, options));\n\n    _Promise.all([this._initializeAudioElm(), this._initializeWaveViewInteraction()]).then(function () {\n      return WavePlayer._mediator.fire('waveplayer:initialized', _this);\n    });\n  }\n\n  /************************\n   * Getters and setters. *\n   ************************/\n\n  /**\n   * Get the current volume of the audio.\n   *\n   * @return {Number}\n   */\n\n  /**\n   * The playlist instance.\n   *\n   * @var {Playlist}\n   */\n\n  /**\n   * The waveview instance associated with this waveplayer instance.\n   *\n   * @var {Object}\n   */\n\n  _createClass(WavePlayer, [{\n    key: 'load',\n\n    /*********************\n     * Public functions. *\n     *********************/\n\n    /**\n     * Load a track and return a promise which may be used to perform an action\n     * when the track has finished loading.\n     *\n     * @param {String} url\n     * @return {Promise}\n     */\n    value: function load(url) {\n      var _this2 = this;\n\n      return _Promise.all([_Promise.resolve(function () {\n        _this2._audioElm.src = url;\n        _this2._audioElm.load();\n      }()), this._getWaveformData(url)]);\n    }\n\n    /**\n     * Start audio playback.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'play',\n    value: function play() {\n      this._audioElm.play();\n    }\n\n    /**\n     * Pause audio playback.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._audioElm.pause();\n    }\n\n    /**\n     * Move the playback header to a specific time in the audio file.\n     *\n     * @param {Number} seconds\n     * @return {void}\n     */\n\n  }, {\n    key: 'skipTo',\n    value: function skipTo(seconds) {\n      this._audioElm.currentTime = seconds;\n    }\n\n    /**\n     * Check if audio is currently playing.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'isPlaying',\n    value: function isPlaying() {\n      return this._audioElm.paused ? false : true;\n    }\n\n    /**\n     * Subscribe to a waveplayer.js event.\n     *\n     * @param {String} topic\n     * @param {Function} fn\n     * @return {void}\n     */\n\n  }, {\n    key: 'on',\n    value: function on(topic, fn) {\n      WavePlayer._mediator.on(topic, fn);\n    }\n\n    /**\n     * Unsubscibe from a waveplayer.js event.\n     *\n     * @param {String} topic\n     * @param {Function} fn\n     * @return {void}\n     */\n\n  }, {\n    key: 'un',\n    value: function un(topic, fn) {\n      WavePlayer._mediator.un(topic, fn);\n    }\n\n    /**\n     * Create a new playlist.\n     *\n     * @param {Array} urls\n     * @param {Object} options\n     * @return {Playlist}\n     */\n\n  }, {\n    key: 'createPlaylist',\n    value: function createPlaylist(urls) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Cancel current playlist before starting a new one\n      this.cancelPlaylist();\n      this._playlist = new Playlist(this, urls, options);\n\n      return this._playlist;\n    }\n\n    /**\n     * Cancel a playlist.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'cancelPlaylist',\n    value: function cancelPlaylist() {\n      if (this._playlist) {\n        this._playlist.destroy();\n      }\n    }\n\n    /**\n     * Destroy the waveplayer instance and do the appropriate clean up.\n     *\n     * @return {void}\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this.pause();\n      this.cancelPlaylist();\n      WavePlayer._mediator.unAll();\n      if (this._audioElm) {\n        this._audioElm.removeEventListener('canplay', this._canplayHandler);\n        this._audioElm.removeEventListener('error', this._errorHandler);\n        this._audioElm.removeEventListener('timeupdate', this._timeUpdateHandler);\n        if (this._ended) {\n          this._audioElm.removeEventListener('ended', this._ended);\n        }\n        this._audioElm.parentNode && this._audioElm.parentNode.removeChild(this._audioElm);\n        this._audioElm = null;\n      }\n      this._waveView.destroy();\n    }\n\n    /**********************\n     * Private functions. *\n     **********************/\n\n    /**\n     * Initialize the interaction with the associated waveview instance by attaching\n     * a click handler to the 'waveview:clicked' event.\n     *\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_initializeWaveViewInteraction',\n    value: function _initializeWaveViewInteraction() {\n      var _this3 = this;\n\n      return _Promise.resolve(function () {\n        if (_this3._onClickHandler) {\n          WavePlayer._mediator.un('waveview:clicked', _this3._onClickHandler);\n        }\n\n        // The 'waveview:clicked' event passes along a number in the range [0-1]\n        // that indicates the position of the click relative to the starting point\n        // of the waveform\n        _this3._onClickHandler = function (progress) {\n          if (_this3.isPlaying()) {\n            // Skip to new position in audio file if we are currently playing something\n            var time = _this3._progressToDuration(progress);\n            _this3.skipTo(time);\n            WavePlayer._mediator.fire('waveplayer:skipped', _this3, time);\n          }\n        };\n        WavePlayer._mediator.on('waveview:clicked', _this3._onClickHandler.bind(_this3));\n      }());\n    }\n\n    /**\n     * Create and initialize the HTML audio element associated with this waveplayer\n     * instance.\n     *\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_initializeAudioElm',\n    value: function _initializeAudioElm() {\n      var _this4 = this;\n\n      return new _Promise(function (resolve, reject) {\n        if (_this4._waveView.container.querySelector('audio')) {\n          _this4._audioElm.removeEventListener('canplay', _this4._canplayHandler);\n          _this4._audioElm.removeEventListener('error', _this4._errorHandler);\n          _this4._audioElm.removeEventListener('timeupdate', _this4._timeUpdateHandler);\n          _this4._waveView.container.removeChild(_this4._audioElm);\n        }\n\n        // Create a new audio element and attach listeners\n        _this4._audioElm = _this4._createAudioElm();\n        _this4._waveView.container.appendChild(_this4._audioElm);\n\n        _this4._canplayHandler = function () {\n          WavePlayer._mediator.fire('waveplayer:canplay', _this4);\n          resolve('waveplayer:canplay');\n        };\n        _this4._audioElm.addEventListener('canplay', _this4._canplayHandler.bind(_this4));\n\n        _this4._errorHandler = function (e) {\n          switch (e.target.error.code) {\n            case e.target.error.MEDIA_ERR_ABORTED:\n              reject(new Error('Fetching process aborted by user'));\n              break;\n            case e.target.error.MEDIA_ERR_NETWORK:\n              reject(new Error('There was a problem downloading the audio file'));\n              break;\n            case e.target.error.MEDIA_ERR_DECODE:\n              reject(new Error('There was a problem decoding the audio file'));\n              break;\n            case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:\n              reject(new Error('Audio is not supported, check the provided URL'));\n              break;\n            default:\n              reject(new Error('An unknown error occurred'));\n          }\n        };\n        _this4._audioElm.addEventListener('error', _this4._errorHandler.bind(_this4));\n\n        _this4._timeUpdateHandler = function (e) {\n          return _this4._waveView.updateWave(_this4._durationToProgress(e.target.currentTime));\n        };\n        _this4._audioElm.addEventListener('timeupdate', _this4._timeUpdateHandler.bind(_this4));\n      });\n    }\n\n    /**\n     * Create a new HTML audio element.\n     *\n     * @return {audio}\n     */\n\n  }, {\n    key: '_createAudioElm',\n    value: function _createAudioElm() {\n      var audioElm = document.createElement('audio');\n      audioElm.controls = false;\n      audioElm.autoplay = false;\n      audioElm.preload = 'auto';\n\n      return audioElm;\n    }\n\n    /**\n     * Get the waveform data for an audio file.\n     *\n     * @param {String} url\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_getWaveformData',\n    value: function _getWaveformData(url) {\n      var _this5 = this;\n\n      return new _Promise(function (resolve, reject) {\n        getJSON(url.substr(0, url.lastIndexOf('.')) + '.json').then(function (response) {\n          if ((typeof response === 'undefined' ? 'undefined' : _typeof(response)) === 'object') {\n            _this5._waveView.drawWave(response[_Object$keys(response)[0]], 0);\n          } else {\n            _this5._waveView.drawWave(response, 0);\n          }\n          resolve('waveplayer:json:fetched');\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n     * Convert a duration in seconds to a progress in the range [0-1].\n     *\n     * @param {number} time\n     * @return {number}\n     */\n\n  }, {\n    key: '_durationToProgress',\n    value: function _durationToProgress(time) {\n      return time / this._audioElm.duration;\n    }\n\n    /**\n     * Convert a progress in the range [0-1] to a time in seconds.\n     *\n     * @param {Number} progress\n     * @return {Number}\n     */\n\n  }, {\n    key: '_progressToDuration',\n    value: function _progressToDuration(progress) {\n      return progress * this._audioElm.duration;\n    }\n  }, {\n    key: 'volume',\n    get: function get() {\n      return this._audioElm.volume;\n    }\n\n    /**\n     * Set the current volume of the audio.\n     *\n     * @param {Number} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._audioElm.volume = value;\n    }\n\n    /**\n     * Check if we can currently interact with the assocated waveview instance.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'interact',\n    get: function get() {\n      return this._waveView.interact;\n    }\n\n    /**\n     * Set the interaction state of the associated waveview instance.\n     *\n     * @param {boolean} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._waveView.interact = value;\n    }\n\n    /**\n     * Check if the associated waveview instance is operating in responsive mode.\n     *\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'responsive',\n    get: function get() {\n      return this._waveView.responsive;\n    }\n\n    /**\n     * Make the associated waveview instance responsive, meaning its width will\n     * scale along with the width of its parent container.\n     *\n     * @param {boolean} value\n     * @return {void}\n     */\n\n    , set: function set(value) {\n      this._waveView.responsive = value;\n    }\n\n    /**\n     * Get the playlist instance associated with this waveplayer instance.\n     *\n     * @return {null|Playlist}\n     */\n\n  }, {\n    key: 'playlist',\n    get: function get() {\n      if (this._playlist) {\n        return this._playlist;\n      }\n\n      return null;\n    }\n  }]);\n\n  return WavePlayer;\n}();\n\nmodule.exports = WavePlayer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * Check if a given node contains a certain class name.\n *\n * @param {node} node\n * @param {String} className\n * @return {boolean}\n */\nvar hasClass = exports.hasClass = function hasClass(node, className) {\n    if (node.classList) {\n        return node.classList.contains(className);\n    } else {\n        return !!node.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n    }\n};\n\n/**\n * Add a class name to a given node.\n *\n * @param {node} node\n * @param {String} className\n * @return {node}\n */\nvar addClass = exports.addClass = function addClass(node, className) {\n    if (node.classList) {\n        node.classList.add(className);\n    } else if (!hasClass(node, className)) {\n        node.className += ' ' + className;\n    }\n\n    return node;\n};\n\n/**\n * Remove a class name from a given node.\n *\n * @param {node} node\n * @param {String} className\n * @return {node}\n */\nvar removeClass = exports.removeClass = function removeClass(node, className) {\n    if (node.classList) {\n        node.classList.remove(className);\n    } else if (hasClass(node, className)) {\n        node.className = node.className.replace(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'), ' ');\n    }\n\n    return node;\n};\n\n/**\n * Toggle between to given classes.\n *\n * @param {node} node\n * @param {String} firstClass\n * @param {String} secondClass\n * @return {void}\n */\nvar toggleClass = exports.toggleClass = function toggleClass(node, firstClass, secondClass) {\n    if (hasClass(node, firstClass)) {\n        addClass(removeClass(node, firstClass), secondClass);\n    } else {\n        addClass(removeClass(node, secondClass), firstClass);\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbGliL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgYSBnaXZlbiBub2RlIGNvbnRhaW5zIGEgY2VydGFpbiBjbGFzcyBuYW1lLlxuICpcbiAqIEBwYXJhbSB7bm9kZX0gbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGhhc0NsYXNzID0gKG5vZGUsIGNsYXNzTmFtZSkgPT4ge1xuICAgIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICByZXR1cm4gbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gISFub2RlLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEFkZCBhIGNsYXNzIG5hbWUgdG8gYSBnaXZlbiBub2RlLlxuICpcbiAqIEBwYXJhbSB7bm9kZX0gbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGNsYXNzTmFtZVxuICogQHJldHVybiB7bm9kZX1cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZENsYXNzID0gKG5vZGUsIGNsYXNzTmFtZSkgPT4ge1xuICAgIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgICAgICBub2RlLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNDbGFzcyhub2RlLCBjbGFzc05hbWUpKSB7XG4gICAgICAgIG5vZGUuY2xhc3NOYW1lICs9IGAgJHtjbGFzc05hbWV9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGEgY2xhc3MgbmFtZSBmcm9tIGEgZ2l2ZW4gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge25vZGV9IG5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWVcbiAqIEByZXR1cm4ge25vZGV9XG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzcyA9IChub2RlLCBjbGFzc05hbWUpID0+IHtcbiAgICBpZiAobm9kZS5jbGFzc0xpc3QpIHtcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDbGFzcyhub2RlLCBjbGFzc05hbWUpKSB7XG4gICAgICAgIG5vZGUuY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpLCAnICcpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xufTtcblxuLyoqXG4gKiBUb2dnbGUgYmV0d2VlbiB0byBnaXZlbiBjbGFzc2VzLlxuICpcbiAqIEBwYXJhbSB7bm9kZX0gbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGZpcnN0Q2xhc3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWNvbmRDbGFzc1xuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZXhwb3J0IGNvbnN0IHRvZ2dsZUNsYXNzID0gKG5vZGUsIGZpcnN0Q2xhc3MsIHNlY29uZENsYXNzKSA9PiB7XG4gICAgaWYgKGhhc0NsYXNzKG5vZGUsIGZpcnN0Q2xhc3MpKSB7XG4gICAgICAgIGFkZENsYXNzKHJlbW92ZUNsYXNzKG5vZGUsIGZpcnN0Q2xhc3MpLCBzZWNvbmRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWRkQ2xhc3MocmVtb3ZlQ2xhc3Mobm9kZSwgc2Vjb25kQ2xhc3MpLCBmaXJzdENsYXNzKTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9saWIvaW5kZXguanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);