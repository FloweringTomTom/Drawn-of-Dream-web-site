traitToHtm() {
    local kind="$1"
    local identifier="$2"
    local key="$3"
    local value="$4"
    local outputMode="$5"
    case "$key" in
        file)
            if [[ "$(discReadConf unavailable "$kind" "$identifier")" == "true" ]]; then
                print "<li>\"<code>${value#*,}</code>\": "
                print "$(keyToLabel "${value%%,*}")"
                print "</li>"
            else
                print "<li>$(simpleIaLink "$kind" "$identifier" "${value#*,}" "$(keyToLabel "${value%%,*}")")</li>"
            fi
            ;;
        unavailableFile)
            print "<li>\"<code>${value#*,}</code>\" (unavailable due to licensing): "
            print "$(keyToLabel "${value%%,*}")"
            print "</li>"
            ;;
        nonPngArtwork)
            simpleMetadata "$(keyToLabel "$key")" "$(simpleIaLink "$value" "$identifier" "$value")"
            ;;
        fileIsSemanticallySignificant)
            if [[ "$value" == "yes" ]]; then
                simpleMetadata "$(keyToLabel "$key")" "yes"
            fi
            ;;
        artworkcount)
            local reverseThumbnailPattern=""
            local artcountValue="$value"
            if [[ "${value: -1}" == "t" ]]; then
                reverseThumbnailPattern="true"
                artcountValue="${value:: -1}"
            fi
            simpleMetadata "$(keyToLabel "$key")" "$(
                local end="$artcountValue"
                for (( i=1; i<=end; i++ )); do
                    if [[ "$(discReadConf unavailable "$kind" "$identifier")" == "true" ]]; then
                        if [[ "$outputMode" == "featured-content" ]]; then
                            simpleIaImage --unavailable --featured-content-page "$kind" "$identifier" "$i" "$reverseThumbnailPattern"
                        else
                            simpleIaImage --unavailable "$kind" "$identifier" "$i" "$reverseThumbnailPattern"
                        fi
                    else
                        if [[ "$outputMode" == "featured-content" ]]; then
                            simpleIaImage --featured-content-page "$kind" "$identifier" "$i" "$reverseThumbnailPattern"
                        else
                            simpleIaImage "$kind" "$identifier" "$i" "$reverseThumbnailPattern"
                        fi
                    fi
                    [[ "$i" != "$end" ]] && print ' '
                done
            )"
            ;;
        track)
            trackTraitToHtm "$@"
            ;;
        recording)
            trackTraitToHtm "$@"
            ;;
        medium)
            local res_keyToLabelKey=""
            res_keyToLabelKey="$(keyToLabel "$key")"
            local res_keyToLabelValue=""
            res_keyToLabelValue="$(keyToLabel "$value")"
            simpleMetadata "$res_keyToLabelKey" "$res_keyToLabelValue"
            ;;
        label)
            if [[ "$outputMode" == "featured-content" ]]; then
                local res_keyToLabel=""
                res_keyToLabel="$(keyToLabel "$key")"
                local res_discReadConf=""
                res_discReadConf="$(discReadConf name label "$value")"
                simpleMetadata "$res_keyToLabel" "$res_discReadConf"
            else
                simpleReference "$key" label "$value"
            fi
            ;;
        artist)
            simpleReference --next-artist-type "$key" artist "$value"
            ;;
        work)
            simpleReference "$key" work "${value/,/\/}"
            ;;
        samplesWork)
            simpleReference "$key" work "${value/,/\/}"
            ;;
        release)
            simpleReference "$key" release "$value"
            ;;
        shortDate)
            if [[ "$outputMode" == "featured-content" ]]; then
                simpleMetadata "$(keyToLabel "$key")" "$value"
            else
                true
            fi
            ;;
        name)
            true
            ;;
        featured)
            true
            ;;
        nextId)
            true
            ;;
        unavailable)
            true
            ;;
        nextArtistType)
            setNextArtistType "$value"
            ;;
        sreg)
            true
            ;;
        context)
            local contextKind="${value%%,*}"
            simpleMetadata "$(keyToLabel "$key")" "${contextKind^}: $(linkToItem --with-date "$contextKind" "${value#*,}" false)"
            ;;
        license)
            simpleMetadata "$(keyToLabel "$key")" "$(getLicenseDisplay --with-license-name "$value")"
            ;;
        hasAlias)
            simpleReference "$key" artist "$value"
            ;;
        isAliasOf)
            simpleReference "$key" artist "$value"
            ;;
        "* Identifiers *")
            closeCurrentSection
            print $'\n\n'"<h2>Identifiers</h2>"$'\n'"<dl>"
            setClosingTag "</dl>"
            ;;
        "* Relationships *")
            true
            ;;
        "* Specs *")
            true
            ;;
        "* Files *")
            closeCurrentSection
            print $'\n\n'"<h2>Files</h2>"$'\n'"<ul>"
            setClosingTag "</ul>"
            ;;
        "* Tracks *")
            recordingsTraitToHtm "$@"
            ;;
        "* Recordings *")
            recordingsTraitToHtm "$@"
            ;;
        mbid)
            simpleMetadata "$(keyToLabel "$key")" "<a href=\"https://musicbrainz.org/${kind%s}/$value\">$value</a>"
            ;;
        ia)
            iaItemsFilePath="$(getRelativeDiscographyDir)/futuramerlin-web-toolkit-discography.iaidentifiers"
            echo "$value" >> "$iaItemsFilePath"
            removeDuplicateLines "$iaItemsFilePath" | sponge "$iaItemsFilePath"
            simpleMetadata "$(keyToLabel "$key")" "<a href=\"https://archive.org/details/$value\">$value</a>"
            ;;
        youtube)
            simpleMetadata "$(keyToLabel "$key")" "<a href=\"https://youtube.com/watch?v=$value\">$value</a>"
            ;;
        filename)
            simpleMetadata "$(keyToLabel "$key")" "<code>$value</code>"
            ;;
        *)
            simpleMetadata "$(keyToLabel "$key")" "$value"
            ;;
    esac
}



keyToLabel() {
    case $1 in
        dateBegun)
            print "Date begun"
            ;;
        shortDate)
            print "Date"
            ;;
        artworkcount)
            print "Artwork"
            ;;
        mbid)
            print "MusicBrainz"
            ;;
        upc)
            print "UPC"
            ;;
        transcodedForSoundrop)
            print "Transcoded for Soundrop distribution"
            ;;
        filename)
            print "File name"
            ;;
        ytdled)
            print "<code>youtube-dl</code>ed"
            ;;
        ytdledFlac)
            print "<code>youtube-dl</code>ed and transcoded to FLAC"
            ;;
        flacBounce)
            print "Work-in-progress FLAC bounce"
            ;;
        aiffBounce)
            print "Work-in-progress AIFF bounce"
            ;;
        flac)
            print "FLAC"
            ;;
        m4a)
            print "M4A"
            ;;
        alac)
            print "M4A: Apple Lossless Audio Codec"
            ;;
        mp3)
            print "MP3"
            ;;
        cdRip)
            print "CD Rip"
            ;;
        flacchecksum)
            print "FLAC checksum"
            ;;
        disambig)
            print "Disambiguation comment"
            ;;
        bpm)
            print "Beats per minute"
            ;;
        remixOriginalArtist)
            print "Original artist of this remixed track"
            ;;
        origExt)
            print "Original file extension"
            ;;
        origExtB)
            print "Original file extension"
            ;;
        origExtC)
            print "Original file extension"
            ;;
        zipRelease)
            print "ZIP release <small>(historic packing)</small>"
            ;;
        zipSession)
            print "ZIP file containing work from the session"
            ;;
        artSource)
            print "Artwork production files"
            ;;
        releaseSource)
            print "Release production files"
            ;;
        soundSource)
            print "Music production files"
            ;;
        releaseTracks)
            print "Original release tracks <small>(packing not original)</small>"
            ;;
        nonPngArtwork)
            print "Nonstandard artwork"
            ;;
        samplesWork)
            print "Samples"
            ;;
        youtubeSourceFile)
            print "YouTube source file"
            ;;
        fileIsSemanticallySignificant)
            print "File is semantically significant"
            ;;
        fmCatNum)
            print "Catalog number"
            ;;
        oldFmCatNum)
            print "Original catalog number"
            ;;
        hypFmCatNum)
            print "Two-part old catalog number"
            ;;
        isAliasOf)
            print "Is alias of"
            ;;
        hasAlias)
            print "Has alias"
            ;;
        legalName)
            print "Legal name"
            ;;
        ia)
            print "Internet Archive"
            ;;
        youtube)
            print "YouTube"
            ;;
        *)
            print "${1^}"
            ;;
    esac
}
